/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 25);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/pages/employees/statistics copy.js":
/*!*********************************************************!*\
  !*** ./resources/js/pages/employees/statistics copy.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class definition\n\nvar EmployeeStatistics = function () {\n  // Private functions\n  var table;\n  var datatable;\n  var currentMonth = moment().format('YYYY-MM'); // var employee_datatable = $('#employee_datatable');\n\n  var statDefinedMonths = $('.statDefinedMonths');\n  var date_picker_start = $('#date_picker_start');\n  var date_picker_end = $('#date_picker_end');\n  var filter_start = moment().format('YYYY-MM');\n  var filter_end = moment().format('YYYY-MM'); // Public functions\n\n  var _initDatatable = function _initDatatable() {\n    datatable = $(table).KTDatatable({\n      // datasource definition\n      data: {\n        type: 'remote',\n        source: {\n          read: {\n            url: statistics_json_url,\n            headers: {\n              'X-CSRF-TOKEN': $('meta[name=csrf-token]').attr(\"content\")\n            },\n            params: {\n              query: {\n                active_status: $('#employee_datatable_search_active').val()\n              }\n            },\n            error: function error(xhr, ajaxOptions, thrownError) {\n              console.log(xhr);\n              console.log(ajaxOptions);\n              console.log(thrownError);\n              var content = {};\n              content.title = thrownError;\n              content.message = Lang.get('script.narrow_down_your_search');\n              var notify = $.notify(content, {\n                type: 'danger',\n                mouse_over: true,\n                z_index: 1051\n              });\n            }\n          }\n        },\n        pageSize: 10,\n        serverPaging: true,\n        serverFiltering: true,\n        serverSorting: true\n      },\n      ext: {\n        errMode: 'throw'\n      },\n      processing: true,\n      // layout definition\n      layout: {\n        scroll: false,\n        // enable/disable datatable scroll both horizontal and vertical when needed.\n        footer: false // display/hide footer\n\n      },\n      // column sorting\n      sortable: true,\n      pagination: true,\n      extensions: {\n        // boolean or object (extension options)\n        checkbox: true\n      },\n      search: {\n        input: $('#employee_datatable_search_query'),\n        key: 'generalSearch'\n      },\n      // columns definition\n      columns: [{\n        field: 'id',\n        title: '#',\n        sortable: false,\n        width: 20,\n        type: 'number',\n        selector: true,\n        textAlign: 'center',\n        autoHide: false\n      }, {\n        field: 'name',\n        title: Lang.get('script.name'),\n        autoHide: false,\n        template: function template(row) {\n          var states = ['success', 'info', 'primary', 'warning', 'danger'];\n          var state = typeof states[row[\"function\"]] === 'undefined' ? states[4] : states[row[\"function\"]];\n          var e_function = row[\"function\"] == 0 ? Lang.get('script.Manager') : Lang.get('script.Employee');\n          var output = \"<div class=\\\"d-flex align-items-center\\\">\\n      \\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"symbol symbol-40 symbol-\".concat(state, \" flex-shrink-0\\\">\\n      \\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"symbol-label\\\">\").concat(row.id, \"</div>\\n      \\t\\t\\t\\t\\t\\t\\t\\t</div>\\n      \\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"ml-2\\\">\\n                                        <a href=\\\"/\").concat(Lang.locale, \"/records/calendar/\").concat(row.id, \"/print?date=\").concat(currentMonth, \"\\\">\\n        \\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-dark-75 font-weight-bold line-height-sm\\\">\").concat(row.name, \" \").concat(row.surname, \"</div>\\n        \\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"font-size-sm text-dark-50 text-hover-primary\\\">\").concat(e_function, \"</span>\\n                                        </a>\\n      \\t\\t\\t\\t\\t\\t\\t\\t</div>\\n      \\t\\t\\t\\t\\t\\t\\t</div>\");\n          return output;\n        }\n      }, {\n        field: 'ORT',\n        title: Lang.get('script.Canton')\n      }, {\n        field: 'active_status',\n        title: Lang.get('script.Active'),\n        template: function template(row) {\n          var active = row.active_status == 1 ? Lang.get('script.validations.yes') : Lang.get('script.validations.no');\n          var status = row.active_status == 1 ? ' label-light-success' : ' label-light-danger';\n          return \"<span class=\\\"label font-weight-bold label-lg\".concat(status, \" label-inline\\\">\").concat(active, \"</span>\");\n        }\n      }, {\n        field: 'seconds',\n        title: Lang.get('script.working_hours'),\n        template: function template(row) {\n          var hours = (row.seconds / 3600).toFixed(2);\n          return \"<span class=\\\"label font-weight-bold label-lg label-inline\\\">\".concat(hours, \"</span>\");\n        }\n      }, {\n        field: 'percentage',\n        title: \"\".concat(Lang.get('script.percentage'), \"(182h)\"),\n        template: function template(row) {\n          var seconds = row.seconds;\n          var desired = 182 * 3600;\n          var percentage = seconds / desired * 100;\n          return \"<span class=\\\"label font-weight-bold label-lg label-inline\\\">\".concat(percentage.toFixed(2), \"%</span>\");\n        }\n      }, {\n        field: 'work_percetage',\n        title: \"\".concat(Lang.get('script.assigned_work_percetage')),\n        template: function template(row) {\n          if (row.work_percetage) {\n            return \"<span class=\\\"label font-weight-bold label-lg label-inline\\\">\".concat(row.work_percetage, \"%</span>\");\n          } else {\n            return \"<span class=\\\"label font-weight-bold label-lg label-inline\\\">\".concat(Lang.get('script.not_set'), \"</span>\");\n          }\n        }\n      }, {\n        field: 'function',\n        title: Lang.get('script.Function'),\n        template: function template(row) {\n          var status = {\n            0: {\n              'title': Lang.get('script.functions.shift_manager'),\n              'class': ' label-light-success'\n            },\n            1: {\n              'title': Lang.get('script.functions.Cleaners'),\n              'class': ' label-light-info'\n            },\n            2: {\n              'title': Lang.get('script.functions.Maintenance'),\n              'class': ' label-light-primary'\n            },\n            3: {\n              'title': Lang.get('script.functions.Stewarding'),\n              'class': ' label-light-warning'\n            },\n            4: {\n              'title': Lang.get('script.not_set'),\n              'class': ' label-light-danger'\n            }\n          };\n\n          if (typeof status[row[\"function\"]] === 'undefined') {\n            return '<span class=\"label font-weight-bold label-lg' + status[4][\"class\"] + ' label-inline\">' + status[4].title + '</span>';\n          }\n\n          return '<span class=\"label font-weight-bold label-lg' + status[row[\"function\"]][\"class\"] + ' label-inline\">' + status[row[\"function\"]].title + '</span>';\n        }\n      }, {\n        field: 'Actions',\n        title: Lang.get('script.Actions'),\n        sortable: false,\n        width: 125,\n        autoHide: false,\n        overflow: 'visible',\n        template: function template(row) {\n          return \"\\n                        <a href=\\\"javascript:;\\\" class=\\\"btnSendEmailSingle btn btn-sm btn-clean btn-icon\\\" data-month=\\\"\".concat(currentMonth, \"\\\" data-record_id=\\\"\").concat(row.id, \"\\\" title=\\\"\").concat(Lang.get('script.send_email'), \"\\\">\\n                            <span class=\\\"svg-icon svg-icon-md\\\">\\n                                <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                                    <path opacity=\\\"0.3\\\" d=\\\"M21 19H3C2.4 19 2 18.6 2 18V6C2 5.4 2.4 5 3 5H21C21.6 5 22 5.4 22 6V18C22 18.6 21.6 19 21 19Z\\\" fill=\\\"currentColor\\\"/>\\n                                    <path d=\\\"M21 5H2.99999C2.69999 5 2.49999 5.10005 2.29999 5.30005L11.2 13.3C11.7 13.7 12.4 13.7 12.8 13.3L21.7 5.30005C21.5 5.10005 21.3 5 21 5Z\\\" fill=\\\"currentColor\\\"/>\\n                                </svg>\\n                            </span>\\n                        </a>\\n                    \");\n        }\n      }],\n      //translation\n      translate: TraceLocales.datatables()\n    });\n    $('#employee_datatable_search_status').on('change', function () {\n      datatable.search($(this).val().toLowerCase(), 'function');\n    });\n    $('#employee_datatable_search_active').on('change', function () {\n      datatable.search($(this).val().toLowerCase(), 'active_status');\n    }); // $('#date_picker').on('change', function() {\n    //     currentMonth = $(this).val();\n    //     datatable.search($(this).val().toLowerCase(), 'month');\n    // });\n\n    $('#employee_datatable_search_status, #employee_datatable_search_active').selectpicker();\n    datatable.on('datatable-on-click-checkbox', function (e) {\n      return;\n      var ids = datatable.checkbox().getSelectedId();\n      var count = ids.length;\n      console.log(ids);\n      $('#datatable_selected_records').html(count);\n\n      if (count > 0) {\n        $('#datatable_group_action_form').collapse('show');\n      } else {\n        $('#datatable_group_action_form').collapse('hide');\n      }\n    }); // datatable on ajax error\n\n    datatable.on('datatable-on-ajax-error', function (e, xhr, textStatus, message) {\n      KTApp.unblock(table);\n      console.log(xhr);\n      console.log(textStatus);\n      console.log(message);\n    });\n  }; // var initDateRangePicker = function() {\n  //     date_picker_start.datetimepicker({\n  //         format: 'YYYY-MM',\n  //         locale: Lang.locale,\n  //         defaultDate: moment().startOf('month'),\n  //         viewMode: 'months',\n  //         maxDate: moment().endOf('month'),\n  //         minDate: moment().subtract(1, 'year').startOf('month'),\n  //     });\n  //     date_picker_end.datetimepicker({\n  //         format: 'YYYY-MM',\n  //         locale: Lang.locale,\n  //         defaultDate: moment().endOf('month'),\n  //         viewMode: 'months',\n  //         maxDate: moment().endOf('month'),\n  //     });\n  //     date_picker_start.on('change.datetimepicker', function (e) {\n  //         filter_start = e.date.format('YYYY-MM');\n  //         date_picker_end.datetimepicker('minDate', e.date);\n  //         // date_picker_end.datetimepicker('date', e.date);\n  //         console.log(filter_start);\n  //         // datatable.search( {'start': filter_start, 'end': filter_end}, 'Date');\n  //     });\n  //     date_picker_start.on('hide.datetimepicker', function (e) {\n  //         statDefinedMonths.removeClass('bg-gray-200 active');\n  //         $('[data-months=\"custom\"]').addClass('bg-gray-200 active');\n  //     });\n  //     date_picker_end.on('change.datetimepicker', function (e) {\n  //         filter_end = e.date.format('YYYY-MM');\n  //         date_picker_start.datetimepicker('maxDate', e.date);\n  //         console.log(filter_end);\n  //         // datatable.search( {'start': filter_start, 'end': filter_end}, 'Date');\n  //     });\n  //     date_picker_end.on('hide.datetimepicker', function (e) {\n  //         statDefinedMonths.removeClass('bg-gray-200 active');\n  //         $('[data-months=\"custom\"]').addClass('bg-gray-200 active');\n  //     });\n  // };\n\n\n  var _definedMonths = function _definedMonths() {\n    statDefinedMonths.on('click', function (e) {\n      e.preventDefault();\n      statDefinedMonths.removeClass('bg-gray-200 active'); // $('[data-months=\"custom\"]').removeClass('bg-gray-200 active');\n\n      $(this).addClass('bg-gray-200 active');\n      var months = $(this).data('months') - 1;\n      filter_start = moment().subtract(months, 'months').format('YYYY-MM');\n      filter_end = moment().format('YYYY-MM'); // date_picker_end.datetimepicker('date', filter_end);\n      // date_picker_start.datetimepicker('date', filter_start);\n\n      console.log(filter_start);\n      console.log(filter_end);\n      $('#dropdown-statistics-toggle').html(\"\".concat(filter_start, \" \").concat(Lang.get('script.to'), \" \").concat(filter_end));\n      datatable.search({\n        'start': filter_start,\n        'end': filter_end\n      }, 'Date');\n    });\n  }; // var applyDateRange = function() {\n  //     $('[data-dropdown=\"apply\"]').on('click', function(e){\n  //         $('#dropdown-statistics-toggle').trigger('click.bs.dropdown');\n  //         datatable.search( {'start': filter_start, 'end': filter_end}, 'Date');\n  //         $('#dropdown-statistics-toggle').html(`${filter_start} ${Lang.get('script.to')} ${filter_end}`);\n  //     });\n  //     $('[data-dropdown=\"cancel\"]').on('click', function(e){\n  //         $('#dropdown-statistics-toggle').trigger('click.bs.dropdown');\n  //     });\n  // };\n\n\n  var exportButtons = function exportButtons() {\n    $('[data-kt-ecommerce-export=\"pdf\"]').on('click', function (e) {\n      e.preventDefault();\n      console.log('pdf'); // jsPDF\n\n      var data = datatable.getDataSet();\n      console.log(data);\n      var doc = new jsPDF('p', 'pt');\n      autoTable(doc, {\n        head: [[{\n          content: 'Name',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Canton',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Active',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Working Hours',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Percentage (182h)',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Assigned Work Percentage',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }, {\n          content: 'Function',\n          styles: {\n            halign: 'left',\n            fillColor: [41, 128, 185],\n            textColor: [255, 255, 255]\n          }\n        }]],\n        body: data,\n        theme: 'grid',\n        styles: {\n          fontSize: 8,\n          cellPadding: 4,\n          overflow: 'linebreak',\n          halign: 'left'\n        },\n        columnStyles: {\n          0: {\n            cellWidth: 100\n          },\n          1: {\n            cellWidth: 50\n          },\n          2: {\n            cellWidth: 50\n          },\n          3: {\n            cellWidth: 50\n          },\n          4: {\n            cellWidth: 50\n          },\n          5: {\n            cellWidth: 50\n          },\n          6: {\n            cellWidth: 50\n          }\n        },\n        margin: {\n          top: 60\n        },\n        didDrawPage: function didDrawPage(data) {\n          doc.text('Employee Statistics', 40, 30);\n        }\n      });\n      doc.save('table.pdf');\n    });\n    return;\n    var buttons = new $.fn.dataTable.Buttons(table, {\n      buttons: [{\n        extend: 'excelHtml5',\n        title: function title() {\n          return documentTitle();\n        },\n        footer: true\n      }, {\n        extend: 'csvHtml5',\n        title: function title() {\n          return documentTitle();\n        },\n        footer: true\n      }, {\n        extend: 'pdfHtml5',\n        title: function title() {\n          return documentTitle();\n        },\n        orientation: 'landscape',\n        pageSize: 'A4',\n        footer: true,\n        download: 'open',\n        customize: function customize(doc) {\n          doc.styles.tableHeader.alignment = 'left';\n          doc.content[1].table.widths = Array(doc.content[1].table.body[0].length + 1).join('*').split('');\n        }\n      }]\n    }).container().appendTo($('#statistics_export')); // Hook dropdown menu click event to datatable export buttons\n\n    var exportButtons = document.querySelectorAll('#kt_ecommerce_report_shipping_export_menu [data-kt-ecommerce-export]');\n    exportButtons.forEach(function (exportButton) {\n      exportButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Get clicked export value\n\n        var exportValue = e.target.getAttribute('data-kt-ecommerce-export');\n        var target = document.querySelector('.dt-buttons .buttons-' + exportValue); // Trigger click event on hidden datatable export buttons\n\n        target.click();\n      });\n    });\n  };\n\n  var _sendEmailSingle = function _sendEmailSingle() {\n    $(table).on('click', '.btnSendEmailSingle', function (e) {\n      e.stopPropagation();\n      KTApp.block(table, {\n        overlayColor: '#000000',\n        state: 'danger',\n        message: Lang.get('script.please_wait')\n      });\n      var content = {};\n      content.title = Lang.get('script.sending_email');\n      content.message = Lang.get('script.checking_emp_email');\n      var notify = $.notify(content, {\n        type: 'primary',\n        mouse_over: true,\n        showProgressbar: true,\n        timer: 10,\n        z_index: 1051\n      });\n      var employee_id = $(this).data('record_id');\n      var month = $(this).data('month');\n      $.ajax({\n        type: 'POST',\n        url: \"/\".concat(Lang.locale, \"/records/calendar/\").concat(employee_id, \"/email\"),\n        data: {\n          'date': month\n        },\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        success: function success(response, status, xhr) {\n          KTApp.unblock(table);\n          console.log(response);\n          setTimeout(function () {\n            notify.update('message', response.success);\n            notify.update('type', 'success');\n            notify.update('progress', 100);\n          }, 5);\n        },\n        error: function error(response) {\n          KTApp.unblock(table);\n          var err = '';\n\n          for (var err in response.responseJSON.errors) {\n            if (response.responseJSON.errors.hasOwnProperty(err)) {\n              err += response.responseJSON.errors[err] + '<br>';\n            }\n          }\n\n          setTimeout(function () {\n            notify.update('message', String(response.responseJSON.message));\n            notify.update('type', 'danger');\n            notify.update('progress', 60);\n          }, 500);\n        }\n      });\n    });\n  };\n\n  var _sendEmailBulk = function _sendEmailBulk() {\n    $('#datatable_send_email_bulk').on('click', function () {\n      console.log('send email');\n      var employees_ids = datatable.checkbox().getSelectedId(); // var count = ids.length;\n\n      $.ajax({\n        type: 'POST',\n        url: \"/\".concat(Lang.locale, \"/records/calendar_report/bulkemail\"),\n        data: {\n          'employees': employees_ids,\n          'date': currentMonth\n        },\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        success: function success(response, status, xhr) {\n          console.log(response);\n        },\n        error: function error(response) {\n          console.log(response);\n        }\n      });\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      table = document.querySelector('#employee_datatable');\n\n      _initDatatable(); // initDateRangePicker();\n\n\n      _definedMonths(); // applyDateRange();\n\n\n      exportButtons();\n\n      _sendEmailBulk();\n\n      _sendEmailSingle();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  EmployeeStatistics.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/employees/statistics copy.js\n");

/***/ }),

/***/ 25:
/*!***************************************************************!*\
  !*** multi ./resources/js/pages/employees/statistics copy.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\HS_Projects\trace\resources\js\pages\employees\statistics copy.js */"./resources/js/pages/employees/statistics copy.js");


/***/ })

/******/ });